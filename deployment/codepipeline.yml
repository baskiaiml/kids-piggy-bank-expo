# CodePipeline CloudFormation Template
# This creates a CI/CD pipeline that:
# - Builds Docker image on code push
# - Deploys to dev environment automatically
# - Requires manual approval for prod deployment

AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline for Kids Piggy Bank ECS Fargate'

Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub repository owner/username
  
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to deploy
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub personal access token
  
  ECRRepositoryURI:
    Type: String
    Description: ECR Repository URI
  
  ECSClusterName:
    Type: String
    Description: ECS Cluster Name
  
  DevServiceName:
    Type: String
    Description: Dev ECS Service Name
  
  ProdServiceName:
    Type: String
    Description: Prod ECS Service Name

Resources:
  # CodeBuild Project for Building Docker Image
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: piggy-bank-build
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: ECR_REPOSITORY_URI
            Value: !Ref ECRRepositoryURI
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Build started on `date`
                - echo Building the Docker image...
            build:
              commands:
                - docker build -t $ECR_REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .
                - docker tag $ECR_REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION $ECR_REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $ECR_REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
                - docker push $ECR_REPOSITORY_URI:latest
                - echo Writing image definitions file...
                - printf '[{"name":"piggy-bank","imageUri":"%s"}]' $ECR_REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION > imagedefinitions.json
          artifacts:
            files:
              - imagedefinitions.json
            name: piggy-bank-$(date +%Y-%m-%d-%H-%M-%S)

  # CodeBuild Project for Dev Deployment
  DevDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: piggy-bank-dev-deploy
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECS_CLUSTER_NAME
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE_NAME
            Value: !Ref DevServiceName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Deploying to Dev environment...
                - echo Updating ECS service...
                - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
                - echo Waiting for deployment to complete...
                - aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME
                - echo Dev deployment completed successfully!

  # CodeBuild Project for Prod Deployment
  ProdDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: piggy-bank-prod-deploy
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECS_CLUSTER_NAME
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE_NAME
            Value: !Ref ProdServiceName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Deploying to Prod environment...
                - echo Scaling up ECS service...
                - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --desired-count 1
                - echo Updating ECS service...
                - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
                - echo Waiting for deployment to complete...
                - aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME
                - echo Prod deployment completed successfully!

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: piggy-bank-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: DeployDev
          Actions:
            - Name: DeployDevAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref DevDeployProject
              InputArtifacts:
                - Name: BuildOutput
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                CustomData: 'Please review the dev deployment and approve for production deployment.'
        - Name: DeployProd
          Actions:
            - Name: DeployProdAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref ProdDeployProject
              InputArtifacts:
                - Name: BuildOutput

  # S3 Bucket for Artifacts
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'piggy-bank-pipeline-artifacts-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30

  # IAM Roles
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - ecs:DescribeClusters
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub '${ArtifactStoreBucket}/*'
                  - !GetAtt ArtifactStoreBucket.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: '*'

Outputs:
  PipelineName:
    Description: CodePipeline Name
    Value: !Ref Pipeline
    Export:
      Name: !Sub ${AWS::StackName}-PipelineName

  ArtifactStoreBucket:
    Description: S3 Bucket for Pipeline Artifacts
    Value: !Ref ArtifactStoreBucket
    Export:
      Name: !Sub ${AWS::StackName}-ArtifactStoreBucket
